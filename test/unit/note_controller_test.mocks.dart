// Mocks generated by Mockito 5.4.4 from annotations
// in note_app/test/unit/note_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:note_app/domain/entities/note.dart' as _i5;
import 'package:note_app/domain/note_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NoteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteRepository extends _i1.Mock implements _i3.NoteRepository {
  MockNoteRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<String, List<_i5.Note>>> fetchNotes() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchNotes,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<String, List<_i5.Note>>>.value(
            _FakeEither_0<String, List<_i5.Note>>(
          this,
          Invocation.method(
            #fetchNotes,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<String, List<_i5.Note>>>);

  @override
  _i4.Future<_i2.Either<String, _i2.Unit>> addNote(_i5.Note? note) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNote,
          [note],
        ),
        returnValue: _i4.Future<_i2.Either<String, _i2.Unit>>.value(
            _FakeEither_0<String, _i2.Unit>(
          this,
          Invocation.method(
            #addNote,
            [note],
          ),
        )),
      ) as _i4.Future<_i2.Either<String, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<String, _i2.Unit>> removeNoteById(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeNoteById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<String, _i2.Unit>>.value(
            _FakeEither_0<String, _i2.Unit>(
          this,
          Invocation.method(
            #removeNoteById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<String, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<String, _i2.Unit>> updateNote(
    int? id,
    _i5.Note? updatedNote,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateNote,
          [
            id,
            updatedNote,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<String, _i2.Unit>>.value(
            _FakeEither_0<String, _i2.Unit>(
          this,
          Invocation.method(
            #updateNote,
            [
              id,
              updatedNote,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<String, _i2.Unit>>);
}
